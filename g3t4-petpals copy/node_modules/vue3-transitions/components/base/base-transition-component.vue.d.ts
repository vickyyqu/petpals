import { EntryExitPropsType } from './props/entry-exit-props-type';
interface BaseUniqueProps {
    name: string;
}
export declare type BasePropsType = BaseUniqueProps & EntryExitPropsType;
declare const _default: import("vue").DefineComponent<{
    name: {
        type: StringConstructor;
        default: null;
        required: true;
    };
    duration: {
        type: (NumberConstructor | ObjectConstructor)[];
        default: number;
    };
    entry: {
        type: StringConstructor;
        default: string;
        validator: (value: string) => boolean;
    };
    exit: {
        type: StringConstructor;
        default: string;
        validator: (value: string) => boolean;
    };
    appear: {
        type: BooleanConstructor;
        required: boolean;
    };
    mode: {
        type: StringConstructor;
        required: boolean;
        validator: (value: string) => boolean;
    };
    group: {
        type: BooleanConstructor;
        required: boolean;
    };
    tag: {
        type: StringConstructor;
        required: boolean;
    };
    persisted: {
        type: BooleanConstructor;
        required: boolean;
    };
}, {
    baseProps: import("vue").ComputedRef<{
        name: string;
        duration: number | {
            enter: number | null;
            leave: number | null;
        };
        mode?: string | undefined;
        appear?: boolean | undefined;
        tag?: string | undefined;
        persisted?: boolean | undefined;
    }>;
    insertDuration: (el: HTMLElement) => void;
    insertLeaveDuration: (el: HTMLElement) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    name: string;
    duration: number;
    entry: string;
    exit: string;
    appear: boolean;
    group: boolean;
    persisted: boolean;
} & {
    mode?: string | undefined;
    tag?: string | undefined;
}>, {
    name: string;
    duration: number;
    entry: string;
    exit: string;
    appear: boolean;
    group: boolean;
    persisted: boolean;
}>;
export default _default;
